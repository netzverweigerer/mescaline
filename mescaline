#!/usr/bin/env python3
# [mescaline] for zsh - <armin@mutt.email> (*non*-powerline compatible version)
# -*- coding: utf-8 -*-
import os
import subprocess
import sys
import re
import getpass
import socket
encoding = sys.getdefaultencoding()
nobg = "default"
class Color:
    path_bg = nobg
    path_fg = 250
    cwd_fg = 254
    repo_clean_bg = nobg
    repo_clean_fg = 242
    repo_dirty_bg = nobg
    repo_dirty_fg = 15
    cmd_passed_bg = nobg
    cmd_passed_fg = 242
    cmd_failed_bg = nobg
    cmd_failed_fg = 203
    root_bg = nobg
    root_fg = 248
    user_bg = nobg
    user_fg = 248
    virtualenv_bg = nobg
    virtualenv_fg = 22
class Mescaline:
    reset = ' %f%k'
    def __init__(self):
        self.segments = []
    def color(self, prefix, code):
        if prefix == '38':
            return '%%F{%s}' % code
        elif prefix == '48':
            return '%%K{%s}' % code
    def fgcolor(self, code):
        return self.color('38', code)
    def bgcolor(self, code):
        return self.color('48', code)
    def append(self, segment):
        self.segments.append(segment)
    def draw(self):
        return (''.join((s[0].draw(self, s[1]) for s in zip(self.segments, self.segments[0:] + [None]))) + self.reset)
class Segment:
    def __init__(self, mescaline, content, fg, bg, foo=None, bar=None):
        self.mescaline = mescaline
        self.content = content
        self.fg = fg
        self.bg = bg
        self.separator_fg = ""
    def draw(self, mescaline, next_segment=None):
            separator_bg = mescaline.reset
            return ''.join((
            mescaline.fgcolor(self.fg),
            mescaline.bgcolor(self.bg),
            self.content,
            separator_bg,
            mescaline.fgcolor(self.separator_fg),
            self.separator_fg))
# prints a warning message
def warn(msg):
    print('[mescaline] ', msg)
# adds a current working directory segment
def add_cwd_segment(mescaline, cwd, maxdepth):
    home = os.getenv('HOME')
    cwd = os.getenv('PWD')
    cwd_fg = "202"
    if cwd.startswith(home):
      cwd = cwd.replace(home, '~', 1)
    mescaline.append(Segment(mescaline, '%s' % cwd, cwd_fg, Color.path_bg, cwd_fg))
def get_git_status():
    has_pending_commits = True
    has_untracked_files = False
    origin_position = ""
    try:
        s = subprocess.Popen(['git', 'status', '-unormal'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = s.communicate()
    except:
        return False
    for line in out.decode(encoding).split('\n'):
        origin_status = re.findall("Your branch is (ahead|behind).*?(\d+) comm", line)
        if len(origin_status) > 0:
            origin_position = " %d" % int(origin_status[0][1])
            if origin_status[0][0] == 'behind':
                origin_position += '↓'
            elif origin_status[0][0] == 'ahead':
                origin_position += '↑'
        if line.find('nothing to commit') >= 0:
            has_pending_commits = False
        if line.find('Untracked files') >= 0:
            has_untracked_files = True
    return has_pending_commits, has_untracked_files, origin_position
def add_git_segment(mescaline, cwd):
    s = subprocess.Popen(['git', 'symbolic-ref', '-q', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = s.communicate()
    if out:
        branch = out[len('refs/heads/'):].rstrip().decode('ASCII')
    else:
        if err.startswith('fatal: Not a git repository'.encode('utf-8')):
            return False 
        else:
            branch = '(Detached)'
    has_pending_commits, has_untracked_files, origin_position = get_git_status()
    if not (len(origin_position)) == 0:
        branch += origin_position
    if has_untracked_files:
        branch += ' +'
    bg = Color.repo_clean_bg
    fg = Color.repo_clean_fg
    if has_pending_commits:
        bg = Color.repo_dirty_bg
        fg = Color.repo_dirty_fg
    separator_left = "["
    separator_right = "]"
    separator_fg = ""
    mescaline.append(Segment(mescaline, separator_fg + separator_left + '%s' % branch + separator_fg + separator_right, fg, bg))
    return True
# adds version control segments
def add_repo_segment(mescaline, cwd):
    for add_repo_segment in [add_git_segment]:
        try:
            if add_repo_segment(m, cwd):
                return
        except subprocess.CalledProcessError:
            pass
        except OSError:
            pass
# adds a python virtualenv segment
def add_virtualenv_segment(mescaline, cwd):
    env = os.getenv("VIRTUAL_ENV")
    if env is None:
        return False
    env_name = os.path.basename(env)
    bg = Color.virtualenv_bg
    fg = Color.virtualenv_fg
    mescaline.append(Segment(mescaline, 'virtualenv: %s' % env_name, fg, bg))
    return True
# adds a username segment
def add_username_segment(mescaline, username):
    if 'root' in username:
        bg = Color.root_bg
        fg = Color.root_fg
    else:
        bg = Color.user_bg
        fg = Color.user_fg
    mescaline.append(Segment(mescaline, '%s' % username, fg, bg))
    return True
# adds an exitcode ($? != 0) indicator
def add_exitcode_indicator(mescaline, error):
    if int(error) != 0:
        fg = Color.cmd_failed_fg
        bg = Color.cmd_failed_bg
    else:
        bg = Color.cmd_passed_bg
        fg = Color.cmd_passed_fg
    mescaline.append(Segment(mescaline, '⠿', fg, bg))
# gets the last valid upper directory
def get_valid_cwd():
    try:
        cwd = os.getcwd()
    except:
        cwd = os.getenv('PWD')
        parts = cwd.split(os.sep)
        up = cwd
        while parts and not os.path.exists(up):
            parts.pop()
            up = os.sep.join(parts)
        try:
            os.chdir(up)
        except:
            warn("is invalid.")
            sys.exit(1)
        warn("CWD is invalid. Lowest valid directory: " + up)
    return cwd
# gets the username
def get_username():
    return getpass.getuser()
# gets the hostname
def get_hostname():
    return socket.gethostname().split('.')[0]
# main code
if __name__ == '__main__':
    m = Mescaline()
    username = get_username()
    hostname = get_hostname()
    txt = username + "@" + hostname
    add_username_segment(m, txt)
    cwd = get_valid_cwd()
    add_virtualenv_segment(m, cwd)
    add_cwd_segment(m, cwd, 5)
    add_repo_segment(m, cwd)
    if int(sys.argv[1]) > 0:
        add_exitcode_indicator(m, sys.argv[1])
    if sys.version_info[0] < 3:
        sys.stdout.write(m.draw().encode('utf-8'))
    else:
        sys.stdout.buffer.write(m.draw().encode('utf-8'))




